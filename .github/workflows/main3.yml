name: CI-Tests

on:
  pull_request:
    branches:
      - master
    types: [labeled]

concurrency:
  group: ${{ github.ref }}-${{ github.actor }}-tests
  cancel-in-progress: true

env:
  YC_REPO: crpkk9pt6ka61lcljkrp
  #  PHP_VERSION: 7.4-dev
  PHP_VERSION: 8.1-dev
  #PHP_VERSION: 8.1-fpm-alpine

jobs:
  build:
    name: Build Image for test
    runs-on: k8s

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - uses: flowwow/gh-actions/cr-login@main
        with:
          YC_TOKEN: ${{ secrets.YC_OAUTH_TOKEN }}

      - name: Removing .dockerignore
        run: |
          sed -i -e 's/.phan//g' ./.dockerignore

      - name: Build CI-Tests Image
        uses: Wandalen/wretry.action@v1.3.0
        timeout-minutes: 13
        env:
          TARGET: app
        with:
          action: docker/build-push-action@v3
          attempt_limit: 3
          attempt_delay: 15000 # 15 second
          with: |
            push: true
            context: .
            target: ${{ env.TARGET }}
            build-args: |
              COMPOSER_AUTH={"github-oauth":{"github.com":"${{ secrets.GH_PAT }}"}}
              FRONT_IMG=cr.yandex/crpkk9pt6ka61lcljkrp/front:dev
              PHP_VERSION=${{ env.PHP_VERSION }}
            file: docker/app/DockerfileV2
            tags: cr.yandex/${{ env.YC_REPO }}/ci-tests:tests-${{ github.run_id }}

  deploy:
    name: test with flowwow
    needs: build

    runs-on: ubuntu-latest-m

    services:
      ci-tests:
        image: cr.yandex/crpkk9pt6ka61lcljkrp/ci-tests:tests-${{ github.run_id }}
        env:
          COMPOSER_AUTH: '{"github-oauth":{"github.com":"${{ secrets.GH_PAT }}"}}'
        options: --name tests-${{ github.run_id }}
      redis:
        image: redis:7.2.3
        env:
          REDIS_ARGS: "--appendonly yes"
        ports:
          - 6379/tcp
          - 8081/tcp
        options: --name redis-${{ github.run_id }}
    steps:

      - name: Checkout-branch
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .git
            docker
            composer.json
            composer.lock
          path: flowwow
          clean: true
          sparse-checkout-cone-mode: false

      - name: Get network info and run mysql
        env:
          COMPOSER_AUTH: '{"github-oauth":{"github.com":"${{ secrets.GH_PAT }}"}}'
        run: |
          docker_network_tests=$(docker inspect tests-${{ github.run_id }} | jq -r '.[].NetworkSettings.Networks' | jq -r '.[].NetworkID')
          docker_ip_redis=$(docker inspect redis-${{ github.run_id }} | jq -r '.[].NetworkSettings.Networks' | jq -r '.[].IPAddress')
          docker run -d --name mysql-${{ github.run_id }} -h mysql -p 3306/tcp --network $docker_network_tests -e MYSQL_USER=dev_writer -e MYSQL_PASSWORD=L4d2d9dc21Axn2 -e MYSQL_DATABASE=bossma_flowwow -e MYSQL_ROOT_PASSWORD=sdasd12312dasda mysql:8.0.32 --sql_mode= --default-authentication-plugin=mysql_native_password --skip-mysqlx --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci          # Waiting for mysql to startup
          docker_port_mysql=$(docker inspect mysql-${{ github.run_id }} | jq -r '.[].NetworkSettings.Ports' | jq -r '.["3306/tcp"][0].HostPort')
          sed -i "s/REDIS_HOST=.*/REDIS_HOST=$docker_ip_redis/" ./flowwow/docker/app/tests/env-common
          sed -i "s/\b3306\b/$docker_port_mysql/g" ./flowwow/docker/app/tests/env-common
          sleep 20
          mkdir -p ./docker-deps
          cp ./flowwow/composer* ./docker-deps
          docker exec mysql-${{ github.run_id }} mysql -uroot -psdasd12312dasda -h 127.0.0.1 -e "GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;"
          docker exec mysql-${{ github.run_id }} mysql -uroot -psdasd12312dasda -h 127.0.0.1 -e "GRANT ALL PRIVILEGES ON *.* TO dev_writer@'%';"

      - name: Download DB dump and apply
        run: |
          mkdir -p ~/.aws
          cat > ~/.aws/credentials << EOF
          [default]
          aws_access_key_id = ${{ secrets.YCDEV_S3_ACCESS_KEY_ID }}
          aws_secret_access_key = ${{ secrets.YCDEV_S3_SECRET_ACCESS_KEY }}
          region=ru-central1
          EOF
          aws s3 cp --endpoint-url=https://s3.yandexcloud.net s3://flowwow-dev.com/mysql/flowwow_schema.sql.gz ./flowwow_schema.sql.gz
          gzip -d -f flowwow_schema.sql.gz
          rm -f flowwow_schema.sql.gz
          mysql --default-character-set=utf8mb4 -uroot -psdasd12312dasda -h 127.0.0.1 -P $(docker inspect mysql-${{ github.run_id }} | jq -r '.[].NetworkSettings.Ports' | jq -r '.["3306/tcp"][0].HostPort') bossma_flowwow < flowwow_schema.sql

      - name: Install Deps
        run: |
          docker cp docker-deps/. tests-${{ github.run_id }}:/app/flowwow
          docker exec -u www-data:www-data tests-${{ github.run_id }} composer install -n --prefer-dist --no-cache

      - name: Run composer-dependency-analyser
        id: composer-dependency-analyser
        run: |
          docker exec -u www-data:www-data --env-file ./flowwow/docker/app/tests/env-common tests-${{ github.run_id }} php vendor/bin/composer-dependency-analyser >> "$GITHUB_OUTPUT"

      - name: Send custom JSON data to Slack workflow
        id: slack
        uses: slackapi/slack-github-action@v1.26.0
        with:
          # For posting a rich message using Block Kit
          payload: |
              {
                "text": "GitHub Action result: ${{ steps.composer-dependency-analyser.outputs }}",
                "blocks": [
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "GitHub Action result: ${{ steps.composer-dependency-analyser.outputs }}"
                    }
                  }
                ]
              }
        env:
          SLACK_WEBHOOK_URL: https://hooks.slack.com/services/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
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Run phan-test
        run: |
          docker exec -u www-data:www-data --env-file ./flowwow/docker/app/tests/env-common tests-${{ github.run_id }} php admin/protected/cron.php phan checkGithub

      - name: Run unittests
        run: |
          docker exec -u www-data:www-data --env-file ./flowwow/docker/app/tests/env-common tests-${{ github.run_id }} php admin/protected/cron.php mig up --interactive=0
          docker exec -u www-data:www-data --env-file ./flowwow/docker/app/tests/env-common tests-${{ github.run_id }} php vendor/bin/codecept run unit -x geocode_provider -x S3 -x Distance -x YmlImport -x Tinkoff -x old -x incomplete --xml

      - name: Save test results
        if: ${{ always() }}
        run: |
          docker cp tests-${{ github.run_id }}:/app/flowwow/admin/protected/tests/codeception/_output/report.xml ./flowwow/report.xml

      - name: Save File To Artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: report
          path: ./flowwow/report.xml

      - name: Test Report
        id: report
        uses: dorny/test-reporter@v1
        if: ${{ always() }}
        with:
          name: JUNIT Tests
          working-directory: ./flowwow
          path: report.xml
          reporter: java-junit
          fail-on-error: 'false'

      - name: Add Comment To PR
        continue-on-error: true
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commentBody = `**Результаты тестов:** ${{ steps.report.outputs.url_html }}\n**Автор коммита**: @${{ github.actor }}`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            })

      - name: Remove Docker Containers/Image
        continue-on-error: true
        if: ${{ always() }}
        run: |
          docker rm -f tests-${{ github.run_id }}
          docker rm -f mysql-${{ github.run_id }}
          docker volume prune -f
